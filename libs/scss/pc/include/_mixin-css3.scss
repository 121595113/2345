//
@mixin borderRadius($param){
  -webkit-border-radius: $param;
  -moz-border-radius: $param;
  border-radius: $param;
}

//
@mixin gra($begin,$end){
  $ieHexStrBegin: ie-hex-str($begin);
  $ieHexStrEnd: ie-hex-str($end);
  zoom: 1;
  background-image: -webkit-gradient(linear, left top, left bottom, from($begin), to($end));
  background-image: -webkit-linear-gradient(top, $begin, $end);
  background-image: -moz-linear-gradient(top, $begin, $end);
  background-image: -ms-linear-gradient(top, $begin, $end);
  background-image: -o-linear-gradient(top, $begin, $end);
  background-image: linear-gradient(top, $begin, $end);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$ieHexStrBegin}', EndColorStr='#{$ieHexStrEnd}');
}

//
@mixin opacityColor($color,$trans){
  $rgba: rgba($color, $trans);
  $ieHexStr: ie-hex-str($rgba);
  background: $rgba;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$ieHexStr}', EndColorStr='#{$ieHexStr}');
  .ie9 &{
    filter: none;
  }
}

//
@mixin opacityImage($path){
  _background: none;
  _filter: progid:DXImageTransform.Microsoft.AlphaImageLoader(enabled=true, sizingMethod=noscale, src="#{$path}");
}

//
@mixin opacityGif($path){
  _background-image: url("#{$path}");
}

@mixin opacityAlpha($param){
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$param*100})";
  filter: alpha(opacity=$param*100);
  -moz-opacity: $param;
  opacity: $param;
}

//
@mixin stretchedImage($path){
  background-size: 100% 100%;
  filter: progid:DXImageTransform.Microsoft.AlphaImageLoader(src="#{$path}", sizingMethod="scale");
  -ms-filter: progid:DXImageTransform.Microsoft.AlphaImageLoader(src="#{$path}", sizingMethod="scale");
}

//
@mixin rotate($degrees){
  zoom: 1;
  //-ms-filter: progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=#{cos($degrees)}, M12=-#{sin($degrees)}, M21=#{sin($degrees)}, M22=#{cos($degrees)});
  //filter:  progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=#{cos($degrees)}, M12=-#{sin($degrees)}, M21=#{sin($degrees)}, M22=#{cos($degrees)});
  -moz-transform: rotate($degrees);
  -o-transform: rotate($degrees);
  -webkit-transform: rotate($degrees);
  -ms-transform: rotate($degrees);
  transform: rotate($degrees);
}

//
@mixin scale($x, $y){
  zoom: 1;
  -moz-transform: scale($x, $y);
  -o-transform: scale($x, $y);
  -webkit-transform: scale($x, $y);
  -ms-transform: scale($x, $y);
  transform: scale($x, $y);
}

@mixin flexbox(){
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: box;
  box-orient: horizontal;
}

@mixin flexboxChild(){
  -webkit-box-flex: 1;
  -moz-box-flex: 1;
  -ms-flex: 1;
  box-flex: 1;
}

@mixin boxShadow($param){
  -moz-box-shadow: $param;
  -webkit-box-shadow: $param;
  box-shadow: $param;
}

@mixin hack($name, $value){
  -moz-#{$name}: $value;
  -webkit-#{$name}: $value;
  #{$name}: $value;
}

@mixin horizontalCenter{
  @include hack(box-align, center);
  @include hack(justify-content, center);
}

@mixin verticalCenter{
  @include hack(box-pack,center);
  @include hack(align-items,center);
}

@mixin angle($size, $bdcolor, $direction, $IEColor: "black"){
  width: 0px;
  height: 0px;
  font-size: 0;
  line-height: 0;
  overflow:hidden;
  border: $size solid transparent;
  _border-color: unquote($IEColor);
  _filter: chroma(color=unquote($IEColor));
  #{$direction}: $size solid $bdcolor;
}

@mixin spritesSize ($param...){
  $left: 0 !default;
  $top: 0 !default;
  $extend: Csprites !default;
  @if length($param) == 1{
    $extend: nth($param, 1);
  }
  @if length($param) == 2{
    $left: nth($param, 1);
    $top:  nth($param, 2);
  }
  @if length($param) == 3{
    $left: nth($param, 1);
    $top:  nth($param, 2);
    $extend: nth($param, 3);
  }
  @extend %#{$extend};

  background-position: $left $top;
}
